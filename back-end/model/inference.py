import os
import re
import dotenv
from openai import AzureOpenAI

dotenv.load_dotenv('.env')

api_key = os.getenv("AZURE_OPENAI_API_KEY")
endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
deployment_name = os.getenv("MODEL_GPT_NAME")
version = os.getenv("OPENAI_API_VERSION")

client = AzureOpenAI(
    api_key = api_key,  
    api_version = version,
    azure_endpoint = endpoint
)

def request_openai(msgs: list, max_tokens: int = 500) -> str:
    """
    Function to request completion from Azure OpenAI API.

    Args:
        msgs (list): List of messages in the conversation.
        max_tokens (int): Maximum number of tokens in the response.

    Returns:
        response_str: The response generated by the model.
    """
    try:
        response = client.chat.completions.create(
            model=deployment_name,
            messages=msgs,
            max_tokens=max_tokens
        )
        response_str = response.choices[0].message.content
    except Exception as e:
        response_str = e
    finally:
        return response_str
    
def run(image_data_url: str) -> str:
    system_buildings = """You are provided with an image of a invoice. Analyze the content of the image and extract the following details in JSON format:

Invoice Number: The unique identifier for the bill.
Date: The date when the invoice was issued.
Total Amount: The total amount to be paid, including currency.
Itemized Charges: A list of charges, each with the following:
Item Name: The name or description of the item.
Quantity: Number of units.
Price per Unit: Cost per unit of the item.
Total Item Cost: Total cost for the item (quantity * price per unit).
Tax: Any tax information included in the invoice.
Billing Address: The address of the person or company receiving the invoice.
Payment Due Date: The deadline to make the payment.

Please return the extracted data in a well-structured JSON format, ensuring that all relevant details from the bill are captured. respond in Spanish always."""

    messages = [
        {"role": "system", "content": system_buildings },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Here is my invoice"
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": image_data_url
                    }
                }
            ]
        }
    ]
    response = request_openai(messages)
    pattern = r'(```.*?[\s\S]*?```)'
    result = re.sub(pattern, r'<code>\1</code>', response)
    return result