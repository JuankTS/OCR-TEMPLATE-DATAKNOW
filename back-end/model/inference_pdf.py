import os
import re
import dotenv
from openai import AzureOpenAI
import pdb 

dotenv.load_dotenv('.env')


api_key = os.getenv("AZURE_OPENAI_API_KEY")
endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
deployment_name = os.getenv("MODEL_GPT_NAME")
version = os.getenv("OPENAI_API_VERSION")


client = AzureOpenAI(
    api_key = api_key,  
    api_version = version,
    azure_endpoint = endpoint
)

def request_openai(msgs: list, max_tokens: int = 8192) -> str:
    """
    Function to request completion from Azure OpenAI API.

    Args:
        msgs (list): List of messages in the conversation.
        max_tokens (int): Maximum number of tokens in the response.

    Returns:
        response_str: The response generated by the model.
    """
    try:
        response = client.chat.completions.create(
            model=deployment_name,
            messages=msgs,
            max_tokens=max_tokens
        )
        response_str = response.choices[0].message.content
    except Exception as e:
        response_str = f"Error al consultar OpenAI: {str(e)}"  # <-- CAMBIO AQUÍ
    return response_str
    
def run_pdf(image_data_urls: list) -> str:
    system_buildings = """Eres un asistente que analiza imágenes. Extrae los detalles importantes del contenido de cada cada imagen y devuélvelos en varios párrafo en español. 
    Haz una analisis por pagina.
    Devuelve:

    Pagina 
    Resumen 

    Pagina
    Resumen
    ........
    
    """
    messages = [{"role": "system", "content": system_buildings}]
    
    user_content = [{"type": "text", "text": "Aquí está mi facturas"}]
    
    for image_url in image_data_urls:
        user_content.append({
            "type": "image_url",
            "image_url": {"url": image_url}
        })
    
    messages.append({"role": "user", "content": user_content})

    response = request_openai(messages)

    # pattern = r'(```.*?[\s\S]*?```)'

    # result = re.sub(pattern, r'<code>\1</code>', response)
    return response